// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkLookup.Models;

#nullable disable

namespace ParkLookup.Migrations
{
    [DbContext(typeof(ParkLookupContext))]
    [Migration("20240223175805_AddSeededStateData")]
    partial class AddSeededStateData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ParkLookup.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ParkLookup.Models.National", b =>
                {
                    b.Property<int>("NationalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("NationalId");

                    b.ToTable("National");
                });

            modelBuilder.Entity("ParkLookup.Models.NationalPark", b =>
                {
                    b.Property<int>("NationalParkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("NationalId")
                        .HasColumnType("int");

                    b.Property<string>("ParkName")
                        .HasColumnType("longtext");

                    b.HasKey("NationalParkId");

                    b.HasIndex("NationalId");

                    b.ToTable("NationalParks");
                });

            modelBuilder.Entity("ParkLookup.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("StateId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            StateId = 1,
                            Name = "Alabama"
                        },
                        new
                        {
                            StateId = 2,
                            Name = "Alaska"
                        },
                        new
                        {
                            StateId = 3,
                            Name = "Arizona"
                        },
                        new
                        {
                            StateId = 4,
                            Name = "Arkansas"
                        },
                        new
                        {
                            StateId = 5,
                            Name = "California"
                        },
                        new
                        {
                            StateId = 6,
                            Name = "Colorado"
                        },
                        new
                        {
                            StateId = 7,
                            Name = "Connecticut"
                        },
                        new
                        {
                            StateId = 8,
                            Name = "Delaware"
                        },
                        new
                        {
                            StateId = 9,
                            Name = "Florida"
                        },
                        new
                        {
                            StateId = 10,
                            Name = "Georgia"
                        },
                        new
                        {
                            StateId = 11,
                            Name = "Hawaii"
                        },
                        new
                        {
                            StateId = 12,
                            Name = "Idaho"
                        },
                        new
                        {
                            StateId = 13,
                            Name = "Illinois"
                        },
                        new
                        {
                            StateId = 14,
                            Name = "Indiana"
                        },
                        new
                        {
                            StateId = 15,
                            Name = "Iowa"
                        },
                        new
                        {
                            StateId = 16,
                            Name = "Kansas"
                        },
                        new
                        {
                            StateId = 17,
                            Name = "Kentucky"
                        },
                        new
                        {
                            StateId = 18,
                            Name = "Louisiana"
                        },
                        new
                        {
                            StateId = 19,
                            Name = "Maine"
                        },
                        new
                        {
                            StateId = 20,
                            Name = "Maryland"
                        },
                        new
                        {
                            StateId = 21,
                            Name = "Massachusetts"
                        },
                        new
                        {
                            StateId = 22,
                            Name = "Michigan"
                        },
                        new
                        {
                            StateId = 23,
                            Name = "Minnesota"
                        },
                        new
                        {
                            StateId = 24,
                            Name = "Mississippi"
                        },
                        new
                        {
                            StateId = 25,
                            Name = "Missouri"
                        },
                        new
                        {
                            StateId = 26,
                            Name = "Montana"
                        },
                        new
                        {
                            StateId = 27,
                            Name = "Nebraska"
                        },
                        new
                        {
                            StateId = 28,
                            Name = "Nevada"
                        },
                        new
                        {
                            StateId = 29,
                            Name = "New Hampshire"
                        },
                        new
                        {
                            StateId = 30,
                            Name = "New Jersey"
                        },
                        new
                        {
                            StateId = 31,
                            Name = "New Mexico"
                        },
                        new
                        {
                            StateId = 32,
                            Name = "New York"
                        },
                        new
                        {
                            StateId = 33,
                            Name = "North Carolina"
                        },
                        new
                        {
                            StateId = 34,
                            Name = "North Dakota"
                        },
                        new
                        {
                            StateId = 35,
                            Name = "Ohio"
                        },
                        new
                        {
                            StateId = 36,
                            Name = "Oklahoma"
                        },
                        new
                        {
                            StateId = 37,
                            Name = "Oregon"
                        },
                        new
                        {
                            StateId = 38,
                            Name = "Pennsylvania"
                        },
                        new
                        {
                            StateId = 39,
                            Name = "Rhode Island"
                        },
                        new
                        {
                            StateId = 40,
                            Name = "South Carolina"
                        },
                        new
                        {
                            StateId = 41,
                            Name = "South Dakota"
                        },
                        new
                        {
                            StateId = 42,
                            Name = "Tennessee"
                        },
                        new
                        {
                            StateId = 43,
                            Name = "Texas"
                        },
                        new
                        {
                            StateId = 44,
                            Name = "Utah"
                        },
                        new
                        {
                            StateId = 45,
                            Name = "Vermont"
                        },
                        new
                        {
                            StateId = 46,
                            Name = "Virginia"
                        },
                        new
                        {
                            StateId = 47,
                            Name = "Washington"
                        },
                        new
                        {
                            StateId = 48,
                            Name = "West Virginia"
                        },
                        new
                        {
                            StateId = 49,
                            Name = "Wisconsin"
                        },
                        new
                        {
                            StateId = 50,
                            Name = "Wyoming"
                        });
                });

            modelBuilder.Entity("ParkLookup.Models.StatePark", b =>
                {
                    b.Property<int>("StateParkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ParkName")
                        .HasColumnType("longtext");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("StateParkId");

                    b.HasIndex("StateId");

                    b.ToTable("StateParks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ParkLookup.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ParkLookup.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParkLookup.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ParkLookup.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkLookup.Models.NationalPark", b =>
                {
                    b.HasOne("ParkLookup.Models.National", null)
                        .WithMany("Parks")
                        .HasForeignKey("NationalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkLookup.Models.StatePark", b =>
                {
                    b.HasOne("ParkLookup.Models.State", null)
                        .WithMany("Parks")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParkLookup.Models.National", b =>
                {
                    b.Navigation("Parks");
                });

            modelBuilder.Entity("ParkLookup.Models.State", b =>
                {
                    b.Navigation("Parks");
                });
#pragma warning restore 612, 618
        }
    }
}
